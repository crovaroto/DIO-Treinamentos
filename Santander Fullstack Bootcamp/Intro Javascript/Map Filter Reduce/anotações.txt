- Map
  -  Cria um novo array
  - Não modifica o array original
  - Realiza operações em ordem
  - Sintaxe;
    array.map(callback, thisArg) onde,
      callback(item, index, array)
    - callback: função a ser executada em cada elemento
    - thisArg: opcional, é o valor this dentro da função callback
  - Map x forEach
    const array = [1, 2, 3, 4, 5];
    //Map
    array.map((item) => item * 2) ; //retorno [2, 4, 6, 8, 10];

    //forEach
    array.forEach((item) => item * 2); //retorno : undefined

- Filter
  - Cria um novo array;
  - Não modifica o array original
  - Sintaxe
    array.filter(callback, thisArg) onde,
      callback(item, index, array)
    - callback: função a ser executada em cada elemento
    - thisArg: opcional, é o valor this dentro da função callback
  - Exemplo:
    const frutas = ['maçã fuji', 'maçã verde', 'laranja', 'abacaxi'];
    frutas.filter((fruta) => fruta.includes('maçã'));
    //retorno: ['maçã fuji', 'maçã verde']

- Reduce
  - Executa uma função em todos os elementos do array e retornar um valor único.
  - Sintaxe:
    arry.reduce(callbackFn, initilaValue) onde,      
    - callbackFn: função a ser executada em cada elemento;
    - initialValue: opcional, valor sobre o qual o retorno irá atuar.
  - Exemplo:
   const callbackFn = function(accumulator, currentValue, index, array) {

   }

   array.reduce(callbackFn, initialValue);
